// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FavoriteQuote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship to User
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // Define the relationship to Quote
  quote   Quote @relation(fields: [quoteId], references: [id])
  quoteId Int

  @@unique([userId, quoteId])
}

model Quote {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  text           String
  origin         String?
  popularity     Int
  tags           String[]
  favoriteQuotes FavoriteQuote[]
  author         Author          @relation(fields: [authorId], references: [id])
  book           Book?           @relation(fields: [bookId], references: [id])
  authorId       Int
  bookId         Int?
  reactions      Reaction[]      @relation("QuoteReactions")

  @@unique([text, authorId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String
  role      UserRole

  firstName String?
  lastName  String?

  favoritedBy FavoriteQuote[]
  Reaction    Reaction[]
}

model Author {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  quotes     Quote[]
  Book       Book[]
  bornPlace  String?
  bornDate   String?
  deathDate  String?
  website    String?
  genres     String[]
  bio        String?
  rating     Float?
  popularity Int?
  image      String?
  reactions  Reaction[] @relation("AuthorReactions")
}

model Book {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  author      Author     @relation(fields: [authorId], references: [id])
  authorId    Int
  rating      Float
  popularity  Int
  description String
  genres      String[]
  date        DateTime
  image       String
  Quote       Quote[]
  reactions   Reaction[] @relation("BookReactions")

  @@unique([title, authorId])
}

enum UserRole {
  USER
  ADMIN
}

enum ReactionType {
  LOVE
  LIKE
  DISLIKE
  HATE
}

enum ReactionEntity {
  AUTHOR
  BOOK
  QUOTE
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship to User
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // Define polymorphic relationships
  quote   Quote? @relation("QuoteReactions", fields: [quoteId], references: [id])
  quoteId Int?

  book   Book? @relation("BookReactions", fields: [bookId], references: [id])
  bookId Int?

  author   Author? @relation("AuthorReactions", fields: [authorId], references: [id])
  authorId Int?

  // Define the reaction type
  type   ReactionType
  entity ReactionEntity

  @@unique([userId, quoteId])
  @@unique([userId, bookId])
  @@unique([userId, authorId])
}
