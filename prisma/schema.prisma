// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FavoriteQuote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship to User
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // Define the relationship to Quote
  quote   Quote @relation(fields: [quoteId], references: [id])
  quoteId Int

  @@unique([userId, quoteId])
}

model Personality {
  id                       Int            @id @default(autoincrement())
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  extroversionIntroversion Float
  sensingIntuition         Float
  thinkingFeeling          Float
  judgingPerceiving        Float
  assertiveTurbulent       Float
  entity                   ReactionEntity
  quote                    Quote?         @relation(fields: [quoteId], references: [id])
  book                     Book?          @relation(fields: [bookId], references: [id])
  author                   Author?        @relation(fields: [authorId], references: [id])
  user                     User?          @relation(fields: [userId], references: [id])
  character                Character?     @relation(fields: [characterId], references: [id])
  quoteId                  Int?           @unique
  bookId                   Int?           @unique
  authorId                 Int?           @unique
  userId                   Int?           @unique
  characterId              Int?           @unique
}

model Quote {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  text           String
  origin         String?
  popularity     Int
  tags           String[]
  favoriteQuotes FavoriteQuote[]
  author         Author          @relation(fields: [authorId], references: [id])
  book           Book?           @relation(fields: [bookId], references: [id])
  authorId       Int
  bookId         Int?
  reactions      Reaction[]      @relation("QuoteReactions")
  personality    Personality?

  @@unique([text, authorId])
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  hash      String
  role      UserRole

  firstName String?
  lastName  String?

  darkTheme Boolean 

  favoritedBy FavoriteQuote[]
  reactions   Reaction[]      @relation("ReactionsByUser")
  reactedBy   Reaction[]      @relation("UserReactions")

  personality Personality?
}

model Author {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  quotes      Quote[]
  books       Book[]
  bornPlace   String?
  bornDate    String?
  deathDate   String?
  website     String?
  genres      String[]
  bio         String?
  rating      Float?
  popularity  Int?
  image       String?
  reactions   Reaction[]   @relation("AuthorReactions")
  personality Personality?
  characters  Character[]
}

model Book {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      Author       @relation(fields: [authorId], references: [id])
  authorId    Int
  rating      Float
  popularity  Int
  description String
  genres      String[]
  pages       Int
  date        DateTime
  image       String
  personality Personality?
  quotes      Quote[]
  reactions   Reaction[]   @relation("BookReactions")
  characters  Character[]  @relation("CharacterBooks")

  @@unique([title, authorId])
}

model Character {
  id          Int          @id @default(autoincrement())
  name        String
  books       Book[]       @relation("CharacterBooks")
  author      Author       @relation(fields: [authorId], references: [id])
  authorId    Int
  rating      Float
  popularity  Int
  description String
  bornPlace   String?
  bornDate    String?
  deathDate   String?
  image       String
  personality Personality?
  reactions   Reaction[]   @relation("CharacterReactions")

  @@unique([name, authorId])
}

enum UserRole {
  USER
  ADMIN
}

enum ReactionType {
  LOVE
  LIKE
  DISLIKE
  HATE
}

enum ReactionEntity {
  AUTHOR
  BOOK
  QUOTE
  CHARACTER
  USER
}

model Reaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationship to User
  user   User @relation("ReactionsByUser", fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // Define polymorphic relationships
  quote   Quote? @relation("QuoteReactions", fields: [quoteId], references: [id], onDelete: Cascade)
  quoteId Int?

  book   Book? @relation("BookReactions", fields: [bookId], references: [id], onDelete: Cascade)
  bookId Int?

  author   Author? @relation("AuthorReactions", fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?

  character   Character? @relation("CharacterReactions", fields: [characterId], references: [id], onDelete: Cascade)
  characterId Int?

  reactedUser   User? @relation("UserReactions", fields: [reactedUserId], references: [id], onDelete: Cascade)
  reactedUserId Int?

  // Define the reaction type
  favorite Boolean
  list     Boolean
  type     ReactionType
  entity   ReactionEntity


  @@unique([userId, quoteId])
  @@unique([userId, bookId])
  @@unique([userId, authorId])
  @@unique([userId, characterId])
  @@unique([userId, reactedUserId])
}
